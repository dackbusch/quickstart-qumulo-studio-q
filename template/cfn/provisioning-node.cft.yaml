AWSTemplateFormatVersion: "2010-09-09"
Description: This template instantiates an EC2 instance for configuration of the Qumulo Cluster and is then shutdown.  Floating IPs, Sidecar role and permissions, SMB share, and AD config are all setup.

Parameters:
  ProvisioningServerAMI:
    Type: String
  SecretKeyName:
    Type: String
  SecretsManagedPolicy:
    Type: String
  KeyName:
    Type: String
  Region:
    Type: String
  PrivateSubnetId:
    Type: String
  PrivateSubnetCidr:
    Type: String
  Node1IP:
    Type: String
  FloatIPs:
    Type: String
  SMBShareName:
    Type: String
  ClusterPwd:
    Type: String
  VPCID:
    Type: String
  domainName:
    Type: String
  dcServerIp:
    Type: String
  SideCarSecretsArn:
    Type: String
  DomainControllerSecretsArn:
    Type: String

Resources:
  QumuloPrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable ports for Provisioning Management of Qumulo'
      VpcId: !Ref VPCID
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Outbound traffic
          FromPort: 0
          IpProtocol: '-1'
          ToPort: 0
      SecurityGroupIngress:
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '9999'
          IpProtocol: tcp
          ToPort: '9999'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '4172'
          IpProtocol: tcp
          ToPort: '4172'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '21'
          IpProtocol: tcp
          ToPort: '21'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '111'
          IpProtocol: tcp
          ToPort: '111'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '445'
          IpProtocol: tcp
          ToPort: '445'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '2049'
          IpProtocol: tcp
          ToPort: '2049'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '3712'
          IpProtocol: tcp
          ToPort: '3712'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: 'TCP ports for NFS, SMB, FTP, Management, and Replication'
          FromPort: '8000'
          IpProtocol: tcp
          ToPort: '8000'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: UDP ports for NFS
          FromPort: '111'
          IpProtocol: udp
          ToPort: '111'
        - CidrIp: !Ref PrivateSubnetCidr
          Description: UDP ports for NFS
          FromPort: '2049'
          IpProtocol: udp
          ToPort: '2049'

  SecretsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref SecretsManagedPolicy

  MyInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref SecretsRole

  ProvisioningNode:
    Type: 'AWS::EC2::Instance'
    Properties:
      Tags:
        - Key: Name
          Value: !Join
            - ""
            - - !Ref "AWS::StackName"
              - " - Qumulo Provisioning Node"
      ImageId: !Ref ProvisioningServerAMI
      InstanceType: t2.micro
      IamInstanceProfile: !Ref MyInstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'false'
          DeleteOnTermination: 'true'
          DeviceIndex: 0
          GroupSet:
            - !Ref QumuloPrivateSecurityGroup
          SubnetId: !Ref PrivateSubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            echo "Running provisioning of qq node"
            yum install -y jq
            aws secretsmanager get-secret-value --secret-id ${SecretKeyName} --region ${Region} --query "SecretString" --output text > /root/keypair.pem
            chmod 600 /root/keypair.pem
            aws secretsmanager get-secret-value --secret-id ${SideCarSecretsArn} --region ${Region} --query "SecretString" --output text | jq -r .username > /root/username.txt
            read sc_username < /root/username.txt
            rm -f /root/username.txt
            aws secretsmanager get-secret-value --secret-id ${SideCarSecretsArn} --region ${Region} --query "SecretString" --output text | jq -r .password > /root/password.txt
            read sc_password < /root/password.txt
            rm -f /root/password.txt
            aws secretsmanager get-secret-value --secret-id ${DomainControllerSecretsArn} --region ${Region} --query "SecretString" --output text | jq -r .dcAdminUsername > /root/username.txt
            read ad_username < /root/username.txt
            rm -f /root/password.txt
            aws secretsmanager get-secret-value --secret-id ${DomainControllerSecretsArn} --region ${Region} --query "SecretString" --output text | jq -r .dcAdminPassword > /root/password.txt
            read ad_password < /root/password.txt
            rm -f /root/password.txt            
            echo "qq login -u admin -p \"${ClusterPwd}\"" >> /root/qqinstall.sh
            echo "qq network_mod_network --network-id 1 --dns-servers ${dcServerIp} --dns-search-domains ${domainName}" >> /root/qqinstall.sh
            echo "until nslookup -type=SRV _kerberos._tcp.${domainName}; do sleep 60; done" >> /root/qqinstall.sh
            echo "qq ad_join -d ${domainName} -u $ad_username -p $ad_password" >> /root/qqinstall.sh
            echo "sleep 30" >> /root/qqinstall.sh
            scp -i /root/keypair.pem -o StrictHostKeyChecking=no /root/qqinstall.sh admin@${Node1IP}:/home/admin/
            ssh -i /root/keypair.pem -o StrictHostKeyChecking=no admin@${Node1IP} "sh /home/admin/qqinstall.sh"
            echo "qq login -u admin -p \"${ClusterPwd}\"" >> /root/qqsmbshare.sh
            echo "qq smb_add_share --name ${SMBShareName} --fs-path /${SMBShareName} --create-fs-path --all-access --default-file-create-mode 777 --default-directory-create-mode 777" >> /root/qqsmbshare.sh
            scp -i /root/keypair.pem -o StrictHostKeyChecking=no /root/qqsmbshare.sh admin@${Node1IP}:/home/admin/
            until ssh -i /root/keypair.pem -o StrictHostKeyChecking=no admin@${Node1IP} 'grep -q "JOINED_TO_DOMAIN" <<< `qq ad_list | grep status`';do
               echo "Not Joined Yet, retrying"
               ssh -i /root/keypair.pem -o StrictHostKeyChecking=no admin@${Node1IP} "sh /home/admin/qqinstall.sh"
            done
            ssh -i /root/keypair.pem -o StrictHostKeyChecking=no admin@${Node1IP} "sh /home/admin/qqsmbshare.sh"
            echo "qq login -u admin -p \"${ClusterPwd}\"" >> /root/qqsidecar.sh
            echo "qq auth_add_user --name $sc_username --primary-group Guests -p \"$sc_password\"" >> /root/qqsidecar.sh
            echo "qq auth_create_role --role $sc_username --description \"Qumulo Sidecar User for AWS\"" >> /root/qqsidecar.sh
            echo "qq auth_modify_role --role $sc_username -G PRIVILEGE_ANALYTICS_READ" >> /root/qqsidecar.sh
            echo "qq auth_modify_role --role $sc_username -G PRIVILEGE_CLUSTER_READ" >> /root/qqsidecar.sh
            echo "qq auth_modify_role --role $sc_username -G PRIVILEGE_FS_ATTRIBUTES_READ" >> /root/qqsidecar.sh
            echo "qq auth_modify_role --role $sc_username -G PRIVILEGE_NETWORK_READ" >> /root/qqsidecar.sh
            echo "qq auth_assign_role --role $sc_username --trustee $sc_username" >> /root/qqsidecar.sh
            echo "sleep 30" >> /root/qqsidecar.sh
            scp -i /root/keypair.pem -o StrictHostKeyChecking=no /root/qqsidecar.sh admin@${Node1IP}:/home/admin/              
            ssh -i /root/keypair.pem -o StrictHostKeyChecking=no admin@${Node1IP} "sh /home/admin/qqsidecar.sh"
            echo "qq login -u admin -p \"${ClusterPwd}\"" >> /root/qqfloatip.sh
            echo "qq network_mod_network --network-id 1 --floating-ip-ranges ${FloatIPs}" >> /root/qqfloatip.sh
            echo "sleep 30" >> /root/qqfloatip.sh
            scp -i /root/keypair.pem -o StrictHostKeyChecking=no /root/qqfloatip.sh admin@${Node1IP}:/home/admin/              
            ssh -i /root/keypair.pem -o StrictHostKeyChecking=no admin@${Node1IP} "sh /home/admin/qqfloatip.sh"
            echo "Sleeping 1 minute just to be sure"
            sleep 1m
            echo "Powering off Provisioning Node"
            sleep 10
            poweroff
Outputs:
  QumuloPrivateSGID:
    Value: !Ref QumuloPrivateSecurityGroup
